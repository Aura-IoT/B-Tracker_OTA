#include <Arduino.h>
#include <BLEDevice.h>
#include <BLEUtils.h>
#include <BLEServer.h>
#include <WiFi.h>
#include <HTTPClient.h>

#define WIFI_SSID "Developer"
#define WIFI_PASSWORD "Co@developer800"

#define SERVICE_UUID "ffffffff-ffff-ffff-ffff-ffffffffffff"
#define CHARACTERISTIC_UUID "ffffffff-ffff-ffff-ffff-fffffffffffe"
void update(String a, double b, double c);
static char *rand_string(char *str, size_t size);
bool shouldISleep = false;


class BLESleepCallback : public BLECharacteristicCallbacks{
  void onWrite(BLECharacteristic *c){
    shouldISleep = true;
  }
};

void setup(){
  Serial.begin(115200);
  pinMode(15, INPUT);
  esp_sleep_enable_ext0_wakeup(GPIO_NUM_15,HIGH);
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  while (WiFi.status() != WL_CONNECTED)
  {
    digitalWrite(2,HIGH);
    delay(500);
    digitalWrite(2,LOW);
    delay(500);
  }
  pinMode(2,OUTPUT);
  digitalWrite(2, HIGH);
  
  BLEDevice::init("B-Tracker");
  BLEServer *pServer = BLEDevice::createServer();
  
  BLEService *pService = pServer->createService(SERVICE_UUID);
  BLECharacteristic *pCharacteristic = pService->createCharacteristic(CHARACTERISTIC_UUID, BLECharacteristic::PROPERTY_WRITE);
  pCharacteristic->setCallbacks(new BLESleepCallback);
  pService->start();
  
  BLEAdvertising *pAdvertising = pServer->getAdvertising();
  pAdvertising->addServiceUUID(SERVICE_UUID);
  pAdvertising->setScanResponse(true);
  pAdvertising->setMinPreferred(0x06);  // functions that help with iPhone connections issue
  pAdvertising->setMinPreferred(0x12);
  
  pAdvertising->start();
}

void loop() {
  update(String("yes"),31.1,34.4);
  delay(100);
  if (shouldISleep) {
    update(String("no"),31.1,34.4);
    update(String("no"),31.1,34.4);
    digitalWrite(2, LOW);
    esp_deep_sleep_start();
  }
  delay(1000);
}

void update(String a, double b, double c){
  HTTPClient http;
  char buffer1[90];
  char buffer2[90];
  char *s = (char*)malloc(22);
  rand_string(s, 8);
  sprintf(buffer2,"https://b-tracker-6a038-default-rtdb.firebaseio.com/locatin/%s.json",s);  
  sprintf(buffer1,"{\"started\":\"%s\",\"lat\":%f,\"lng\":%f}",a.c_str(),b,c);  
  http.begin(buffer2);
  http.addHeader("Content-Type", "application/x-www-form-urlencoded");
  http.addHeader("Content-Length", String(sizeof(*buffer1)).c_str() );
  http.PUT(String(buffer1));
  http.end();
}

static char *rand_string(char *str, size_t size)
{
    const char charset[] = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJK...";
    if (size) {
        --size;
        for (size_t n = 0; n < size; n++) {
            int key = rand() % (int) (sizeof charset - 1);
            str[n] = charset[key];
        }
        str[size] = '\0';
    }
    return str;
}